{"version":3,"sources":["Details.js","config.js","App.js","index.js"],"names":["Details","className","this","props","data","season","Episode","Title","target","href","imdbID","imdbRating","React","Component","end","API_KEY","Form","state","search","seasons","result","handleSearchChange","bind","handleSeasonsChange","handleSubmit","event","setState","value","preventDefault","query","encodeURI","self","fetch","config","then","res","json","totalSeasons","trim","split","randomSeason","filter","length","Math","floor","random","allEpisodes","Episodes","randomEpisode","catch","err","console","log","Fragment","onSubmit","placeholder","type","onChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAKqBA,G,mLAEb,OACI,sBAAKC,UAAU,UAAf,cACK,sBAAMA,UAAU,gBAAhB,SAAiCC,KAAKC,MAAMC,KAAKC,SADtD,KAEI,sBAAMJ,UAAU,iBAAhB,SAAkCC,KAAKC,MAAMC,KAAKE,UAFtD,OAGU,sBAAML,UAAU,QAAhB,SAAyBC,KAAKC,MAAMC,KAAKG,QAHnD,OAKI,oBAAGC,OAAO,SAASC,KAAI,qCAAgCP,KAAKC,MAAMC,KAAKM,OAAhD,KAAvB,cACMR,KAAKC,MAAMC,KAAKO,WADtB,oB,GARqBC,IAAMC,YCD5BC,EAJL,CACTC,QAAS,YCKWC,E,kDAOjB,WAAYb,GAAQ,IAAD,8BACf,cAAMA,IAGDc,MAAQ,CAAEC,OAAQ,GAAIC,QAAS,GAAIC,OAAQ,IAGhD,EAAKC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,oBAAsB,EAAKA,oBAAoBD,KAAzB,gBAC3B,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBATL,E,+DAiBAG,GACfvB,KAAKwB,SAAS,CAAER,OAAQO,EAAMjB,OAAOmB,U,0CAQrBF,GAChBvB,KAAKwB,SAAS,CAAEP,QAASM,EAAMjB,OAAOmB,U,mCAS7BF,GACTA,EAAMG,iBAGN,IAAIC,EAAQC,UAAU5B,KAAKe,MAAMC,QAC7Ba,EAAO7B,KAGX8B,MAAM,mCAAD,OAAoCC,EAAOlB,QAA3C,cAAwDc,IACxDK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAA9B,GAGF,IAAIiC,EAAejC,EAAKiC,aAGpBlB,EAAUY,EAAKd,MAAME,QAAQmB,OAAOC,MAAM,QAgB1CC,EACuB,KAd3BrB,EAAUA,EAAQsB,QAAO,SAAApC,GACrB,MAAe,KAAXA,MAECA,GAAU,IAAMA,EAASgC,OAWlBK,OACNC,KAAKC,MAAMD,KAAKE,SAAWR,GAAgB,EAC3ClB,EAAQwB,KAAKC,MAAMD,KAAKE,SAAW1B,EAAQuB,SAIrDV,MAAM,mCAAD,OAAoCC,EAAOlB,QAA3C,cAAwDc,EAAxD,mBAAwEW,IACxEN,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAA9B,GAEF,IAAI0C,EAAc1C,EAAK2C,SACnBC,EAAgBF,EAAYH,KAAKC,MAAMD,KAAKE,SAAWC,EAAYJ,SAGvEX,EAAKL,SAAS,CAAEN,OAAO,2BAAK4B,GAAN,IAAqB3C,OAAQmC,SAEtDS,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,SAEjCD,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BAI9B,OACI,eAAC,IAAMG,SAAP,WACI,qBAAKpD,UAAU,mBAAf,SACI,mBAAGA,UAAU,gBAAgBQ,KAAK,uCAAlC,uBAMJ,sBAAKR,UAAU,OAAf,UAEI,0CAEA,uBAAMqD,SAAUpD,KAAKsB,aAArB,UACI,uBAAO+B,YAAY,gBAAgBtD,UAAU,OAAOuD,KAAK,OAAO7B,MAAOzB,KAAKe,MAAMC,OAAQuC,SAAUvD,KAAKmB,qBACzG,uBAAOkC,YAAY,cAActD,UAAU,UAAUuD,KAAK,OAAO7B,MAAOzB,KAAKe,MAAME,QAASsC,SAAUvD,KAAKqB,sBAC3G,uBAAOiC,KAAK,SAAS7B,MAAM,cAGR,KAAtBzB,KAAKe,MAAMG,OAAgB,cAAC,EAAD,CAAShB,KAAMF,KAAKe,MAAMG,SAAa,2BAOvE,sBAAKnB,UAAU,OAAf,UACI,qDAEA,yJAC4H,2CAD5H,sBAIA,sGAIA,+Q,GAvIcW,IAAMC,WCDxC6C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.fc13e1b1.chunk.js","sourcesContent":["/* Details page that shows the episode name, and rating upon a successful request*/\r\n\r\nimport './Details.css'\r\nimport React from 'react'\r\n\r\nexport default class Details extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"details\">\r\n                S<span className=\"season-number\">{this.props.data.season}</span>-E\r\n                <span className=\"episode-number\">{this.props.data.Episode}</span>\r\n                &nbsp;<span className=\"title\">{this.props.data.Title}</span>\r\n                &nbsp;\r\n                <a target=\"_blank\" href={`https://www.imdb.com/title/${this.props.data.imdbID}/`}>\r\n                    ({this.props.data.imdbRating}&#x2605;)\r\n                </a>\r\n            </div>\r\n        );\r\n    }\r\n}","let end = {\r\n\tAPI_KEY: \"b61c4799\",\r\n};\r\n\r\nexport default end;\r\n","import './App.css'\r\nimport React from 'react'\r\n\r\nimport Details from './Details.js';\r\nimport config from './config.js'\r\n\r\nexport default class Form extends React.Component {\r\n\r\n    /**\r\n     * Constructor for Form class\r\n     * \r\n     * @param {Object} props The React props object\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Needed the search and seasons text from the input text files and need the result from API call\r\n        this.state = { search: '', seasons: '', result: '' };\r\n\r\n        // Bind all the functions to the class\r\n        this.handleSearchChange = this.handleSearchChange.bind(this);\r\n        this.handleSeasonsChange = this.handleSeasonsChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Handles the change of the seach input field - update state accordingly.\r\n     * \r\n     * @param {Object} event The JS event object\r\n     */\r\n    handleSearchChange(event) {\r\n        this.setState({ search: event.target.value });\r\n    }\r\n    \r\n    /**\r\n     * Handles the change of the seasons input field - update state accordingly.\r\n     * \r\n     * @param {Object} event The JS event object\r\n     */\r\n    handleSeasonsChange(event) {\r\n        this.setState({ seasons: event.target.value });\r\n    }\r\n\r\n    /**\r\n     * Handles the click of the submit button - Request data from the server using input values, after \r\n     * randomizing the season numbers. \r\n     * \r\n     * @param {Object} event The JS event object\r\n     */\r\n    handleSubmit(event) {\r\n        event.preventDefault(); //Prevent page reload \r\n\r\n        // Get the seach string from the user input. \r\n        let query = encodeURI(this.state.search);\r\n        let self = this;\r\n\r\n        // GET TV show from the API using the seach string\r\n        fetch(`https://www.omdbapi.com/?apikey=${config.API_KEY}&t=${query}`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n\r\n                // Get total seasons that the TV show has from API result\r\n                let totalSeasons = data.totalSeasons;\r\n\r\n                // Create array of all the values entered in the seasons input box \r\n                let seasons = self.state.seasons.trim().split(/[ ]+/);\r\n\r\n                // Filter the season numbers array to exclude the number of seasons that the show never produced.\r\n                seasons = seasons.filter(season => {\r\n                    if (season === \"\") return false;\r\n\r\n                    if (+season <= 0 || +season > totalSeasons) return false;\r\n\r\n                    return true;\r\n                })\r\n\r\n                /**\r\n                 * Get a random season\r\n                 * If user input is empty, get a random number from all seasons form the TV show\r\n                 * Else, get a random season the from seasons array \r\n                 */\r\n                let randomSeason = (\r\n                        seasons.length === 0 \r\n                        ? Math.floor(Math.random() * totalSeasons) + 1\r\n                        : seasons[Math.floor(Math.random() * seasons.length)] \r\n                    );\r\n\r\n                // GET the details of the season from the server\r\n                fetch(`https://www.omdbapi.com/?apikey=${config.API_KEY}&t=${query}&season=${randomSeason}`)\r\n                    .then(res => res.json())\r\n                    .then(data => {\r\n                        // Generate a random episode from a list of all episodes in the season\r\n                        let allEpisodes = data.Episodes;\r\n                        let randomEpisode = allEpisodes[Math.floor(Math.random() * allEpisodes.length)];\r\n                        \r\n                        // Change state of the React app using the episode object from the server\r\n                        self.setState({ result: {...randomEpisode, season: randomSeason} });\r\n                    })\r\n                    .catch(err => console.log(err))\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"donate-container\">\r\n                    <a className=\"donate-button\" href=\"https://www.buymeacoffee.com/mrrobot\">Support</a>\r\n                </div>\r\n\r\n                {\r\n                    // Main section with user inputs\r\n                }\r\n                <div className=\"main\">\r\n\r\n                    <h1>Shufflix</h1>\r\n\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <input placeholder=\"Enter TV show\" className=\"show\" type=\"text\" value={this.state.search} onChange={this.handleSearchChange} />\r\n                        <input placeholder=\"All Seasons\" className=\"seasons\" type=\"text\" value={this.state.seasons} onChange={this.handleSeasonsChange} />\r\n                        <input type=\"submit\" value=\"Submit\" />\r\n                    </form>\r\n\r\n                    {this.state.result !== '' ? <Details data={this.state.result} /> : <div></div>}\r\n\r\n                </div>\r\n                \r\n                {\r\n                    // Help section to guide the user on how to use the service\r\n                }\r\n                <div className=\"help\">\r\n                    <h2>How does this work?</h2>\r\n\r\n                    <p>\r\n                        This tool randomizes an episode from all the episodes in a TV show. Good while looking for a random episode to watch of <i>The Office</i> during lunch :)\r\n                    </p>\r\n                    \r\n                    <p>\r\n                        Enter a TV show name in the first box. Make sure to spell it correct.\r\n                    </p>\r\n\r\n                    <p>\r\n                        (OPTIONAL) Enter season numbers you want to shuffle the episode from, separated by space. \r\n                        Example: 1 2 5 100 would randomize any episode within season 1, 2, 5 or 100. \r\n                        If left blank, system randomizes all episodes of the TV show.\r\n                    </p>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}